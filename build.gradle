buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
        classpath "com.android.databinding:dataBinder:1.0-rc2"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

allprojects {
    repositories {
        jcenter()
    }
    group = 'io.freefair'
    apply from: 'https://gist.githubusercontent.com/larsgrefer/30b36bd74b162631f143/raw/d4155e673d7908193eb65f9bb6640250d7f282d8/git-version.gradle'
}

subprojects {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.1"

        defaultConfig {
            minSdkVersion 1
            targetSdkVersion 23
            versionCode 1
            versionName project.version
        }
    }

    apply plugin: 'com.github.dcendents.android-maven'

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    android.libraryVariants.all { variant ->

        if (variant.name.contains("release")) {
            task("sources${variant.name.capitalize()}Jar", type: Jar) {
                from variant.javaCompile.source
                classifier = 'sources'
            }

            task("javadoc${variant.name.capitalize()}", type: Javadoc) {
                description "Generates Javadoc for $variant.name."
                source = variant.javaCompile.source
                ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
                classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
                options.links("http://docs.oracle.com/javase/7/docs/api/");
                options.links("http://developer.android.com/reference/");
                options.addStringOption('Xdoclint:none', '-quiet')
                failOnError false
            }

            task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "javadoc${variant.name.capitalize()}") {
                description "Generates Javadoc Jar for $variant.name."
                classifier = 'javadoc'
                from tasks.findByPath("javadoc${variant.name.capitalize()}").destinationDir
            }

            artifacts {
                archives tasks.findByPath("javadoc${variant.name.capitalize()}Jar")
                archives tasks.findByPath("sources${variant.name.capitalize()}Jar")
            }
        }
    }
}
